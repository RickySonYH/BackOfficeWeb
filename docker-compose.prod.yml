# [advice from AI] 프로덕션용 Docker Compose 설정
version: '3.8'

services:
  # 프론트엔드 서비스
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: aicc-ops-frontend
    ports:
      - "6001:6001"
    environment:
      - NODE_ENV=production
    volumes:
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aicc-ops-network

  # 백엔드 서비스
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: aicc-ops-backend
    ports:
      - "6000:6000"
    environment:
      - NODE_ENV=production
      - PORT=6000
      - HOST=0.0.0.0
    env_file:
      - ./backend/.env.production
    volumes:
      - ./logs/backend:/app/logs
      - ./uploads:/app/uploads
      - ./config:/app/config:ro
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aicc-ops-network

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: aicc-ops-postgres
    ports:
      - "6432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-aicc_operations}
      - POSTGRES_USER=${DB_USER:-aicc_admin}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./backend/src/database/indexes.sql:/docker-entrypoint-initdb.d/02-indexes.sql:ro
      - ./logs/postgres:/var/log/postgresql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-aicc_admin} -d ${DB_NAME:-aicc_operations}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aicc-ops-network

  # Redis (세션 관리)
  redis:
    image: redis:7-alpine
    container_name: aicc-ops-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aicc-ops-network

  # ECP 인증 서버 (별도 서비스)
  ecp-auth:
    build:
      context: ./backend-ecp
      dockerfile: Dockerfile
    container_name: aicc-ops-ecp-auth
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
    env_file:
      - ./backend-ecp/.env.production
    volumes:
      - ./logs/ecp-auth:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aicc-ops-network

  # Nginx 리버스 프록시 (선택사항)
  nginx-proxy:
    image: nginx:alpine
    container_name: aicc-ops-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/proxy:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - aicc-ops-network

  # 로그 집계 (선택사항)
  fluentd:
    image: fluentd:v1.16-debian
    container_name: aicc-ops-fluentd
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/apps:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - aicc-ops-network

  # 모니터링 (선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: aicc-ops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - aicc-ops-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  aicc-ops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
